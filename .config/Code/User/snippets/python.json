{
    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }

    "New class of Cog": {
        "prefix": "newcog",
        "body": [
            "\"\"\"",
            "Cog ext: ${1:Example}",
            "\"\"\"",
            "from discord.ext import commands\n\n",
            "class $1(commands.Cog):\n",
            "\tdef __init__(self, bot) -> None:",
            "\t\tself.bot = bot\n",
            "\t@commands.command()",
            "\tasync def ${2:test}(self, ctx) -> None:",
            "\t\t\"\"\"Description.\"\"\"",
            "\t\tawait ctx.send('$2 is done')\n\n",
            "def setup(bot) -> None:",
            "\tbot.add_cog($1(bot))\n"
        ]
    },
    "With open write": {
        "prefix": "ww",
        "body": [
            "with open(${1:'index.html'}, 'w') as f:",
            "\t${2:f.write(${3:r.text})}"
        ]
    },
    "With open append": {
        "prefix": "wa",
        "body": [
            "with open(${1:'index.html'}, 'a') as f:",
            "\t${2:f.write(${3:r.text})}"
        ]
    },
    "With open read": {
        "prefix": ["wr", "wo"],
        "body": [
            "with open(${1:'index.html'}) as f:",
            "\t${2:${3:lines} = f.read().splitlines()}"
        ]
    },
    "Downloads_dir check & create if not exist": {
        "prefix": "ddir",
        "body": [
            "from sys import argv",
            "from os import makedirs, path\n",
            "DIR = path.dirname(argv[0])\n",
            "DOWNLOADS_DIR = f'{DIR}/downloads'",
            "makedirs(DOWNLOADS_DIR, exist_ok=True)"
        ]
    },
    "Downloads_path check & create if not exist": {
        "prefix": "dpath",
        "body": [
            "from pathlib import Path\n",
            "PATH = str(Path(__file__).parent.resolve())\n",
            "DOWNLOADS_PATH = f'{PATH}/downloads'",
            "Path(DOWNLOADS_PATH).mkdir(parents=True, exist_ok=True)"
        ]
    },
    "If file exists": {
        "prefix": "iffe",
        "body": "if path.isfile(${1:file}):\n\t$0"
    },
    "If file not exists": {
        "prefix": "iffn",
        "body": "if not Path(index_file).is_file():\n\tpass"
    },
    "Time taken": {
        "prefix": "tt",
        "body": [
            "from time import time\n",
            "start_time = time()",
            "print(f'\\n‚è± [Time taken]: {time() - start_time}')"
        ]
    }
    // "print": {
    //     "prefix": ["p", "pr"],
    //     "body": "print($1)"
    // }
}
